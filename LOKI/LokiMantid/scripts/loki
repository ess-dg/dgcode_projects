#!/usr/bin/env mantidpython

import argparse
import os
from pathlib import Path
import sys

parser = argparse.ArgumentParser(description = 'Process detection MCPL files from loki simulations to produce nexus files (one for the detectors, one for the monitors) readable with Mantid.')
parser.add_argument('filename', help = 'Input detection MCPL file. Assumed to be a path relative to the directory defined by the G4PROC_MCPL_BASEDIR_LOKI environment variable, unless a full path is given.')
parser.add_argument('-s','--savename', help = 'Output nexus filename base. Automatically extended by "_detector.nxs" and "_monitor.nxs". Assumed to be a path relative to the directory defined by the G4PROC_SAVEDIR_LOKI environment variable, unless a full path is given.')

parser.add_argument('--rear_detector_distance_m', help = 'Rear detector distance.')
parser.add_argument('--analysis_straw_pixel_number', help = 'Number of pixels per detector straw.')
parser.add_argument('--detectorWorkspaceTofStart', default = 11000, type=int, help = 'TOF start for the detector workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('--detectorWorkspaceTofBinWidth', default = 1000, type=int, help = 'TOF bin width for the detector workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('--detectorWorkspaceTofEnd', default = 113000, type=int, help = 'TOF end for the detector workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('--monitorWorkspaceTofStart', default = 9000, type=int, help = 'TOF start for the monitor workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('--monitorWorkspaceTofBinWidth', default = 1000, type=int, help = 'TOF bin width for the monitor workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('--monitorWorkspaceTofEnd', default = 100000, type=int, help = 'TOF end for the monitor workspace spectra binning. (default: %(default)d microSeconds)')
parser.add_argument('-det', '--detectorOnly', action = 'store_true', help = 'Create only the detector spectrum file.')
parser.add_argument('-mon', '--monitorOnly', action = 'store_true', help = 'Create only the monitor spectrum file.')
parser.add_argument('-no', '--noOutput', action = 'store_true', help = 'Developer option. No output is generated.')
parser.add_argument('-v', '--verbose', action = 'store_true', help = 'Enable more verbosity.')
parser.add_argument('-show', '--showMetadata', action = 'store_true', help = 'Only output metadata stored in the detection MCPL file (without producing nxs files).')
parser.add_argument('-i', '--idfCreation', action = 'store_true', help = 'Save the idf files created based on inputs.')
parser.add_argument('--singleNexus', action = 'store_true', default=True, help = 'Save a single nexus file (or idf) for all detector banks together, instead of one for each.')

mcstasParamGroup = parser.add_argument_group('McStas parameters', 'Supplement McStas simulation parameters')
mcstasParamGroup.add_argument('--mcstasDir', help = 'Name of the McStas directory containing the monitor spectra. Assumed to be a path relative to the directory defined by the G4PROC_MCSTAS_BASEDIR_LOKI environment variable, unless a full path is given.')
mcstasParamGroup.add_argument('--mcstas_monitors', nargs='*', help = 'Name of the McStas monitor files (this option overrides the default ones).')

floodPramGroup = parser.add_argument_group('Flood source parameters', 'Supplement flood source simulation parameters missing from the detection MCPL files (legacy files), or override parameters stored in the files.')
floodPramGroup.add_argument('-n', '--neutronNumber', type=float, help = 'The total number of neutrons used to create the (probably merged) detection MCPL input file.')
floodPramGroup.add_argument('--neutron_wavelength_min_aangstrom', help = 'Minimum neutron wavelength used for the flood source sampling.')
floodPramGroup.add_argument('--neutron_wavelength_max_aangstrom', help = 'Maximum neutron wavelength used for the flood source sampling.')
floodPramGroup.add_argument('--sampling_cone_opening_deg', help = 'Maximum opening angle of the cone used for the direction sampling.')
floodPramGroup.add_argument('--sampling_cone_opening_min_deg', help = 'Minimum opening angle of the cone used for the direction sampling.')
floodPramGroup.add_argument('--source_monitor_distance_meters', help = 'Source to preSample monitor distance. The preSample monitor TOF spectrum is generated for this distance.')
floodPramGroup.add_argument('--aiming_bank_id', help = 'Id(s) of the banks to include.')
floodPramGroup.add_argument('--nominal_source_sample_distance_meters', help = 'Nominal source(moderator) to sample position distance. [m]')

# args = parser.parse_args()

# def resolveFilename(filename, baseEnvVar):
#   base = os.environ.get(baseEnvVar, None)
#   if os.path.isabs(filename):
#     return Path(filename)
#   elif base:
#     return Path(base) / filename
#   else:
#     sys.exit(f"ERROR: The provided filename ({filename}) is not an absolute path, and the {baseEnvVar} env var is not set.")

# mcplFile = resolveFilename(args.filename, 'G4PROC_MCPL_BASEDIR_LOKI')
# if not (args.noOutput or args.showMetadata):
#   saveFileBase = resolveFilename(args.savename, 'G4PROC_SAVEDIR_LOKI')
# if args.mcstasDir:
#   mcStasFolder = resolveFilename(args.mcstasDir, 'G4PROC_MCSTAS_BASEDIR_LOKI')
# #TODO check if files exists and stop with error, or overide?

from LokiMantid.lokiAlgorithm import LoadLokiDetectionEvents

testClass = LoadLokiDetectionEvents()
testClass.load(parser)