#!/usr/bin/env mantidpython

import mantid.simpleapi as api
from mantid.kernel import DateAndTime
from Core import FindData
import MCPL
import numpy as np
import time as measureTime
from pathlib import Path
from datetime import datetime
from glob import glob
import os, sys

#mcStasFolderName, mcplFileName, saveFileName = ("flat_col5_5bs3_10bs5_split1e4_1e10_acc50", "flatSample/col5_acc50_rearBank5m_rear5/col5_acc50_rearBank5m_rear5.mcpl", "SavedNexusFile.nxs")
#mcStasFolderName, mcplFileName, saveFileName, rear = ("flat_col5_5bs3_10bs5_split1e5_1e11_acc5k", "flatSample/col5_acc5k_rearBank5m_rear5/col5_acc5k_rearBank5m_rear5.mcpl", "SavedNexusFile_5k.nxs", 5)
#mcStasFolderName, mcplFileName, saveFileName, rear = ("samp18_col3_5bs5_10bs5_split1e4_1e11_acc500", "sample18/col3_acc500_frontMidBanks_rear5/col3_acc500_frontMidBanks_rear5.mcpl", "col3_acc500_frontMidBanks_rear5.nxs", 5)
#mcStasFolderName, mcplFileName, saveFileName, rear = ("samp18_col3_5bs5_10bs5_split1e4_1e11_acc500", "sample18/col3_acc500_rearBank5m_rear5/col3_acc500_rearBank5m_rear5.mcpl", "col3_acc500_rearBank5m_rear5.nxs", 5) 

#mcStasFolderName = "flat_col5_5bs3_10bs5_split1e4_1e10_acc50"
#mcplFileName = "flatSample/col5_acc50_rearBank5m_rear5/col5_acc50_rearBank5m_rear5.mcpl"
#saveFileName = "SavedNexusFile_5k.nxs"

mcStasFolderName, mcplFileName_front, mcplFileName_rear, saveFileName, rear = ("test_mcstas32_col5_samp18_acc5_weighted_split10_1e7_3", "testMcStasUpdate/test_mcstas271_col5_samp10_acc5k_deweighted_split100_5e8/frontmid/detectionEvents.mcpl", "testMcStasUpdate/test_mcstas271_col5_samp10_acc5k_deweighted_split100_5e8/rear5/detectionEvents.mcpl", "test_mcstas271_col5_samp10_acc5k_deweighted_split100_5e8_rear5.nxs", 5)

mcplBaseDir = Path(os.environ.get('G4PROC_MCPL_BASEDIR_LOKI', None))
mcstasBaseDir = Path(os.environ.get('G4PROC_MCSTAS_BASEDIR_LOKI', None))
saveDir_loki = Path(os.environ.get('G4PROC_SAVEDIR_LOKI', None))

mcStasFolder = str(mcstasBaseDir / mcStasFolderName)
mcplFiles = [mcplBaseDir / mcplFileName_front, mcplBaseDir / mcplFileName_rear]
saveFile = str(saveDir_loki / saveFileName)

if rear == 5:
    # instrumentDefinitionFile = str(idfBaseDir / "LOKI_Definition_rear5m.xml")
    instrumentDefinitionFile = FindData("LokiMantid","LOKI_Definition_rear5m.xml")
elif rear == 10:
    # instrumentDefinitionFile = str(idfBaseDir / "LOKI_Definition_rear10m.xml")
    instrumentDefinitionFile = FindData("LokiMantid","LOKI_Definition_rear10m.xml")
else:
    sys.exit(f'Wrong rear bank distance: {rear}')

def extractMonitorData(filename):
    with open(filename) as monitorFile:
        data = monitorFile.readlines()
        
        headerLines = 0
        for line in data:
            if line.startswith('#'):
                headerLines +=1
        
        header = data[headerLines-1].split(" ")

        monitorData = np.array([x.split(" ") for x in data[headerLines:-1]])

        wavelength = None
        tof = None
        if header[2] == 't':
            tof = monitorData[:, 0].astype(np.float32) * 1000000  # convert to microseconds
        else:
            wavelength = monitorData[:, 0].astype(np.float32)
        intensity = monitorData[:, 1].astype(np.float32)
        error = monitorData[:, 2].astype(np.float32)
        
        return tof, wavelength, intensity, error


startScriptTime = measureTime.time()
# do stuff


print("Process McStas monitors - START")

FOCMonitor = '/Mon10_PostFOC_*.t'
HaloMonitor = '/PreSampleMonitor_*.t'
TransmissionMonitor = '/PostSampleMonitor_*.t'
BeamstopMonitor = '/beamstopMonitor_5m_*.t' #TODO 5m vs 10m
fileList = [FOCMonitor, HaloMonitor, TransmissionMonitor, BeamstopMonitor]

X = []
Y = []
E = []
detIDs = []

for i, file in enumerate(fileList):
    if len(glob(mcStasFolder + file)) == 1:
        fileList[i] = glob(mcStasFolder + file)[0]
    else:
        sys.exit(f'Problem with finding {mcStasFolder + file}')
    
    tof, wavelength, y, e = extractMonitorData(fileList[i])
    X.append(wavelength if tof is None else tof)
    Y.append(y)
    E.append(e)
    # x = convertToBinEdges(x)
    # monitors[i] = CreateWorkspace(OutputWorkspace="monitorWs"+str(i),DataX=x, DataY=y, DataE=e, NSpec=1)
    # monitors.append(x, y, e)
X = np.array(X)
Y = np.array(Y)
E = np.array(E)
print(X)
mcStasMonitorWS = api.CreateWorkspace(OutputWorkspace="mcStasMonitorWS", DataX=X, DataY=Y, DataE=E, NSpec=len(fileList), UnitX='TOF', YUnitLabel='Counts')

api.LoadInstrument(Workspace=mcStasMonitorWS, Filename=instrumentDefinitionFile, RewriteSpectraMap=True)

print("Process McStas monitors - END")


print("Process Geant4 data - START")

Geant4DataWS = api.LoadEmptyInstrument(instrumentDefinitionFile, MakeEventWorkspace=True)

numHists = Geant4DataWS.getNumberHistograms()
detToIndex = {}
for i in range(numHists):
    eventList = Geant4DataWS.getSpectrum(i)
    id = eventList.getDetectorIDs()
    detToIndex[id[0]] = i
    eventList.clear(False)


pulsetime = datetime.now()
        
dateTime = DateAndTime(pulsetime.isoformat(sep="T"))
numHistograms = Geant4DataWS.getNumberHistograms()

allEventList = [ Geant4DataWS.getSpectrum(idx) for idx in range(numHistograms)]

#tof = np.array([])
#detids = np.array([])

readBlockLength = 100000000
#myfile = mcpl.MCPLFile(mcplFile, blocklength=readBlockLength)

idOffset = 11

print("Loading detection events from MCPL - START")

for mcplFile in mcplFiles:
    tof = np.array([])
    detids = np.array([])
    myfile = MCPL.MCPLFile(mcplFile, blocklength=readBlockLength)
    with myfile:
        for p in myfile.particle_blocks:
            detids = np.append(detids, p.userflags.astype(int))
            tof = np.append(tof, p.time * 1000.0)  # convert to microseconds
        
        print("Loading detection events from MCPL - END")

        print("Add events to workspace - START")
        for time,detId in zip(tof, detids):
            try:
                allEventList[detToIndex[detId+idOffset]].addEventQuickly(time, dateTime)
            except:
                print(f'Index problem: {detId} withOffset: {detId+idOffset}')
                pass

        print("Add events to workspace - END")
        
    
tofmin = int(Geant4DataWS.getTofMin())
tofmax = int(Geant4DataWS.getTofMax())
#print('tofmin', tofmin)
#print('tofmax', tofmax)
width = tofmax - tofmin
#width = (tofmax - tofmin)/100 #milan
ptMin = Geant4DataWS.getPulseTimeMin()
ptMax = Geant4DataWS.getPulseTimeMax()

run = Geant4DataWS.run()
run.setStartAndEndTime(ptMin, ptMax)
run.addProperty("run_number", "1", True)
run.addProperty("run_start", str(ptMin), True)
run.addProperty("TimeUnit", "Micro Seconds", True)
api.SortEvents(InputWorkspace=Geant4DataWS, SortBy='Pulse Time')
#Geant4DataWS = Rebin(InputWorkspace=Geant4DataWS, OutputWorkspace=Geant4DataWS,
#             Params=str(tofmin) + "," + str(width) + "," + str(tofmax), PreserveEvents=True)
Geant4DataWS.setYUnitLabel("Counts")
Geant4DataWS.getAxis(0).setUnit("TOF")

print("Process Geant4 data - END")    

tofHistogramStart = 9000 # [microSeconds]
tofHistogramBinwidth = 1000 # [microSeconds]
tofHistogramEnd = 100000 # [microSeconds]
params = [tofHistogramStart, tofHistogramBinwidth, tofHistogramEnd]

if (tofmin < tofHistogramStart):
    print("WARNING: tofmin is lower than the histogram limit")
if (tofmax > tofHistogramEnd):
    print("WARNING: tofmax is higher than the histogram limit")
    
Geant4DataWS2D = api.Rebin(InputWorkspace=Geant4DataWS, OutputWorkspace='Geant4DataWS2D', Params=params, PreserveEvents=False)
mcStasMonitorWS_rebin = api.Rebin(InputWorkspace=mcStasMonitorWS, OutputWorkspace='mcStasMonitorWS_rebin', Params=params)

# Copy Monitor Data into Geant4DataWS workspace
gw = api.mtd['Geant4DataWS2D']
mw = api.mtd['mcStasMonitorWS_rebin']
for i in range(4):
    gw.setY(i, mw.readY(i))


# Save nexus file
api.SaveNexus(Geant4DataWS2D, saveFile)
print(f'Saved Nexus file: {saveFile}')

elapsed = measureTime.time() - startScriptTime
print(elapsed)

# Not sure, if needed
#DeleteWorkspace(Workspace=mcStasMonitorWS)
#DeleteWorkspace(Workspace=Geant4DataWS)
