#!/usr/bin/env python3

import csv
import xml.etree.ElementTree as ET
import argparse
from LokiUtils.PixelIdConverters import Larmor2022GeometryConverter, Larmor2022TubeNumberingConverter

parser = argparse.ArgumentParser(description = 'Merge and convert LOKI maskfiles to Larmor2022 experiment maskfile by reading multiple maskfiles and outputing one that has the intersection of the masked IDs. (Any pixelID that is missing from a file must have been reached by a geantino without going through an absorbing layer.)')
parser.add_argument('filenames', nargs = '+',  help = 'Input maskfile names.')
parser.add_argument('-s', '--savename', required=True, help = 'Output maskfile name.')
parser.add_argument('--convert_old_to_new_tube_numbering', default=False, action = 'store_true', help = 'Convert a maskfile with old tube numbering(ICD v1) to new tube numbering.')
parser.add_argument('-spn', '--straw_pixel_number', default=512, type=int, help = 'Number of pixels per straw.')
args = parser.parse_args()

assert args.straw_pixel_number == 512, "straw_pixel_number must be 512 for the Larmor2022 experiment!"
larmor2022Converter = Larmor2022GeometryConverter(args.straw_pixel_number)
tubeNumberingConverter = Larmor2022TubeNumberingConverter(args.straw_pixel_number)

def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

pixelOffset = 1 #it used to be 11 for IDF containing monitors and detectors

idIntersection = ()
for index, fileName in enumerate(args.filenames):
    tree = ET.parse(fileName)
    root = tree.getroot()
    #print(root.tag)
    groupElement = root.find('group')
    detidsElement = groupElement.find('detids')

    idStringList = list(detidsElement.text.split(","))
    idList_fullGeom = [int(idString)-pixelOffset for idString in idStringList]

    if args.convert_old_to_new_tube_numbering:
      idList_fullGeom = [tubeNumberingConverter.getNewPixelId(id) for id in idList_fullGeom]

    idList = [ id-larmor2022Converter.getReductionPixelOffset_newGeom(id)+pixelOffset for id in idList_fullGeom if larmor2022Converter.isPixelInLarmor2022Geom(id) ]

    if(index == 0):
        idIntersection = idList
    else:
        idIntersection = intersection(idIntersection, idList)

    print(f'File: {fileName}, number of masked IDs: {len(idList)}, intersected IDs so far: {len(idIntersection)}')

idIntersection.sort()
print(f'Final number of masked IDs (intersections): {len(idIntersection)}')

with open(args.savename, 'w' ) as f:
    f.write('<?xml version="1.0"?>\n')
    f.write('<detector-masking>\n')
    f.write('\t<group>\n')
    f.write('\t\t<detids> ')
    writer = csv.writer(f)
    writer.writerow(idIntersection)
    f.write(' </detids>\n')
    f.write('\t</group>\n')
    f.write('</detector-masking>')
    f.close()
